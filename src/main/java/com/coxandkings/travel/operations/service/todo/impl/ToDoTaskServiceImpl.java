package com.coxandkings.travel.operations.service.todo.impl;

import com.coxandkings.travel.ext.model.be.BookingActionConstants;
import com.coxandkings.travel.operations.criteria.todo.ToDoCriteria;
import com.coxandkings.travel.operations.enums.todo.*;
import com.coxandkings.travel.operations.enums.user.UserType;
import com.coxandkings.travel.operations.exceptions.OperationException;
import com.coxandkings.travel.operations.model.booking.KafkaBookingMessage;
import com.coxandkings.travel.operations.model.core.OpsBooking;
import com.coxandkings.travel.operations.model.core.OpsProduct;
import com.coxandkings.travel.operations.model.todo.ToDoTask;
import com.coxandkings.travel.operations.model.todo.ToDoTaskDetails;
import com.coxandkings.travel.operations.repository.todo.ToDoTaskRepository;
import com.coxandkings.travel.operations.resource.MessageResource;
import com.coxandkings.travel.operations.resource.todo.*;
import com.coxandkings.travel.operations.resource.user.OpsUser;
import com.coxandkings.travel.operations.resource.user.role.Role;
import com.coxandkings.travel.operations.service.alert.AlertService;
import com.coxandkings.travel.operations.service.mdmservice.ClientMasterDataService;
import com.coxandkings.travel.operations.service.todo.ToDoMdmService;
import com.coxandkings.travel.operations.service.todo.ToDoTaskService;
import com.coxandkings.travel.operations.service.user.UserService;
import com.coxandkings.travel.operations.utils.Constants;
import com.coxandkings.travel.operations.utils.CopyUtils;
import com.coxandkings.travel.operations.utils.NullAwareCopyUtils;
import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.Trigger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import javax.transaction.Transactional;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

import static com.coxandkings.travel.operations.enums.todo.ToDoTaskTypeValues.FOLLOWING;
import static com.coxandkings.travel.operations.enums.todo.ToDoTaskTypeValues.MAIN;
import static com.coxandkings.travel.operations.utils.Constants.ER01;
import static org.quartz.TriggerBuilder.newTrigger;

@Service
public class ToDoTaskServiceImpl implements ToDoTaskService {

    private Logger log = LogManager.getLogger(ToDoTaskService.class);
    /* certain unmet requirements
    TODO - when a main task is inactive all the sub tasks and following tasks should be set inactive
    TODO - update task status(How will system do it)
    TODO - VALIDATION - if someone tries to change assignedBy field of a task, we need to verify whether he is authorized to do it.
    TODO - VALIDATION - user can only edit ToDoTask name, ToDoTask description, Suggested actions
    TODO - VALIDATION - Only supervisor can change priority of autogenerated task
    TODO - VALIDATION - Only supervisor and creator of a user can change priority of a task
    TODO - DiscrepancyStatus changes
     */

    @Autowired
    @Qualifier("GenericScheduler")
    private Scheduler scheduler;

    @Autowired
    private ToDoTaskRepository toDoTaskRepository;

    @Autowired
    private ToDoMdmService toDoMdmService;

    @Autowired
    private ClientMasterDataService clientMasterDataService;
    @Autowired
    private UserService userService;

    @Autowired
    private AlertService alertService;

    @Autowired
    @Value(value = "${todo.assign_user_roles}")
    private String assignUserRoles;

    @Value("${user_management.ops_user_type.OpsApprovalUser}")
    private String approverUser;

    @Value("${user_management.ops_user_type.OpsEmailMonitorUser}")
    private String OpsEmailMonitorUser;

    private static final String FILE_HANDLER_UNASSIGNED = "Un Assigned";

    private DocumentContext documentContext = null;

    public ToDoResponse getAll() {
        ToDoResponse toDoResponse = toDoTaskRepository.getAll();
        return toDoResponse;
    }

//    private JobDetail getJobDetail(Map<String, String> jobData, String jobtype) {
//        JobDataMap jobDataMap = new JobDataMap();
//        jobDataMap.put("toDoService", this);
//
//        jobData.forEach(jobDataMap::put);
//        if (jobtype.equals("DUE")) {
//            return JobBuilder.newJob().ofType(ToDoDueDateJob.class).storeDurably().setJobData(jobDataMap).build();
//        } else if (jobtype.equals("VIEW")) {
//            return JobBuilder.newJob().ofType(ToDoViewJob.class).storeDurably().setJobData(jobDataMap).build();
//        }
//
//        return null;
//    }

    private Trigger getTrigger(JobDetail jobDetail, Long timeInSeconds) {
        final long ONE_SECOND_IN_MILLIS = 1000;
        return newTrigger().forJob(jobDetail).startAt(new Date(System.currentTimeMillis() + timeInSeconds * ONE_SECOND_IN_MILLIS)).build();
    }

//    private void scheduleJob(Map<String, String> jobData, Long timeInSeconds, String jobType) throws SchedulerException {
//        JobDetail jobDetail = getJobDetail(jobData, jobType);
//        Trigger trigger = getTrigger(jobDetail, timeInSeconds);
//        scheduler.scheduleJob(jobDetail, trigger);
//    }

    @Override
    public List<ToDoTaskResponse> assignTasks(ToDoAssignResource toDoTaskResources) {
        //TODO: view threshold considerations
        List<ToDoTask> tasks = toDoTaskResources.getTaskIds()
                .stream()
                .map(t -> {
                    ToDoTask task = toDoTaskRepository.getById(t);
                    task.setFileHandlerId(toDoTaskResources.getFileHandlerid());
                    task.setAssignedBy(userService.getLoggedInUserId());
                    task.setTaskStatus(ToDoTaskStatusValues.ASSIGNED);
                    task.setAlertNotified(false);
                    task = toDoTaskRepository.saveOrUpdate(task);
                    return task;
                }).collect(Collectors.toList());


        List<ToDoTaskResponse> toDoTasks = null;
        try {
            preProcessBeforeEveryGetList(tasks);
            toDoTasks = getToDoResponses(tasks);
        } catch (JSONException | IOException | OperationException e) {
            e.printStackTrace();
        }


        return toDoTasks;
    }

    @Override
    public void preProcessBeforeEveryGet(ToDoTask toDoTask) throws OperationException, IOException, JSONException {
        if (documentContext == null) {
            InputStream inputStream = ToDoTaskService.class.getResourceAsStream("/toDoConfig.json");
            documentContext = JsonPath.parse(inputStream);
        }

        String toDoTaskSubType = toDoTask.getTaskSubType().name();
        String toDoTaskName = toDoTask.getTaskName().toString();

        String query = "$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == 'ALL')].url";
        List<String> toDoTaskConfig = documentContext.read(query);

        if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
            toDoTask.setUrl(toDoTaskConfig.get(0) + toDoTask.getReferenceId());
        }

        query = "$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == '" + toDoTaskName + "')].url";
        toDoTaskConfig = documentContext.read(query);

        if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
            toDoTask.setUrl(toDoTaskConfig.get(0) + toDoTask.getReferenceId());
        }

        query = "$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == 'OTHER')].url";
        toDoTaskConfig = documentContext.read(query);

        if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
            toDoTask.setUrl(toDoTaskConfig.get(0) + toDoTask.getReferenceId());
        }
    }

    private void preProcessBeforeEveryGetListResponse(List<ToDoTaskResponse> toDoTaskResponses) {
        InputStream inputStream = ToDoTaskService.class.getResourceAsStream("/toDoConfig.json");
        DocumentContext documentContext = JsonPath.parse(inputStream);

        for (ToDoTaskResponse task : toDoTaskResponses) {
            String toDoTaskSubType = task.getTaskSubType();
            String toDoTaskName = task.getTaskNameValue();

            List<String> toDoTaskConfig = documentContext.read("$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == 'ALL')].url");

            if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
                task.setUrl(toDoTaskConfig.get(0) + task.getReferenceId());
                continue;
            }

            toDoTaskConfig = documentContext.read("$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == '" + toDoTaskName + "')].url");

            if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
                task.setUrl(toDoTaskConfig.get(0) + task.getReferenceId());
                continue;
            }

            toDoTaskConfig = documentContext.read("$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == 'OTHER')].url");

            if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
                task.setUrl(toDoTaskConfig.get(0) + task.getReferenceId());
            }
        }
    }

    @Override
    public void preProcessBeforeEveryGetList(List<ToDoTask> toDoTasks) {
        if (documentContext == null) {
            InputStream inputStream = ToDoTaskService.class.getResourceAsStream("/toDoConfig.json");
            documentContext = JsonPath.parse(inputStream);
        }

        for (ToDoTask task : toDoTasks) {
            String toDoTaskSubType = task.getTaskSubType().name();
            String toDoTaskName = task.getTaskName().toString();

            List<String> toDoTaskConfig = documentContext.read("$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == 'ALL')].url");

            if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
                task.setUrl(toDoTaskConfig.get(0) + task.getReferenceId());
                continue;
            }

            toDoTaskConfig = documentContext.read("$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == '" + toDoTaskName + "')].url");

            if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
                task.setUrl(toDoTaskConfig.get(0) + task.getReferenceId());
                continue;
            }

            toDoTaskConfig = documentContext.read("$[?(@.taskSubType == '" + toDoTaskSubType + "')].taskNames[?(@.taskName == 'OTHER')].url");

            if (toDoTaskConfig != null && !toDoTaskConfig.isEmpty()) {
                task.setUrl(toDoTaskConfig.get(0) + task.getReferenceId());
            }
        }
    }

    private UserType getUserType() {
        UserType usrType = null;
        String userRole = null;
        Optional<String> opsUserRole = null;
        try {

            OpsUser loggedInUser = userService.getLoggedInUser();
            List<Role> roles = loggedInUser.getRoles();
            if (roles != null) {
                opsUserRole = roles.stream().filter(role -> role.getRoleName().equalsIgnoreCase("OpsUser")).map(role -> role.getRoleName()).findFirst();
            }
            if (opsUserRole.isPresent()) {
                userRole = opsUserRole.get();
            }

            usrType = userService.getOpsUserType(userRole);
            if (usrType == null)
                usrType = UserType.OPS_USER;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return usrType;
    }

    @Override
    public ToDoResponse getByCriteria(ToDoCriteria criteria) throws OperationException {
        boolean canAssignTask = false;
        UserType usrType = null;
        try {

            OpsUser aOpsUser = userService.getLoggedInUser();
            if (aOpsUser == null) {
                aOpsUser = userService.getSystemUser();
            }
            String loggedInUserID = aOpsUser.getUserID();
            List<Role> roles = aOpsUser.getRoles();
            if (roles != null) {
                canAssignTask = canUserAssignTask(roles);
            }

            if (StringUtils.isEmpty(criteria.getAssignedBy()) && !(StringUtils.isEmpty(criteria.getTaskArea())) )  {
                if (criteria.getTaskArea().equalsIgnoreCase("assigned_by_me")){
                //        || criteria.getTaskArea().equalsIgnoreCase("my_tasks")) {
                    criteria.setAssignedBy(loggedInUserID);
                }
            }


            if (roles != null) {
                for (Role role : roles) {
                    if (role.getRoleName().equalsIgnoreCase("OpsUser")) {
                        usrType = userService.getOpsUserType(role.getRoleName());
                        break;
                    } else if (role.getRoleName().equalsIgnoreCase("OpsApprovalUser")) {
                        usrType = userService.getOpsUserType(role.getRoleName());
                        break;
                    }
                }
            }

            if (usrType == null)
                usrType = UserType.OPS_USER;

            criteria.setUserType(usrType);
        } catch (Exception e) {
            log.error("Error in fetching User info using MDM Token", e);
            e.printStackTrace();
        }

        ToDoResponse toDoResponse = toDoTaskRepository.getByCriteria(criteria, false);
        List<ToDoTaskResponse> toDoTaskResponses = null;
        try {
            preProcessBeforeEveryGetList(toDoResponse.getContent());
            toDoTaskResponses = getToDoResponses(toDoResponse.getContent());
        } catch (JSONException | IOException e) {
            log.error("Error in fetching To Do tasks for user");
            e.printStackTrace();
        }
//        preProcessBeforeEveryGetListResponse(toDoTaskResponses); //commented by Nikhil G
        toDoResponse.setData(toDoTaskResponses);
        toDoResponse.setContent(null);

        toDoResponse.setCanAssignTask(canAssignTask);
        return toDoResponse;
    }

    private boolean canUserAssignTask(List<Role> loggedInUserRoles) {
        boolean canAssignTask = false;
        try {

            List<String> assignableRoles = Arrays.asList(assignUserRoles.split(","));

            Optional<Role> canBeAssignedRole = loggedInUserRoles.stream().filter(role -> assignableRoles.contains(role.getRoleName())).findFirst();
            if (canBeAssignedRole.isPresent()) {
                canAssignTask = true;
            }

        } catch (Exception e) {
            log.error("Error in fetching User Type for logged in user", e);
            e.printStackTrace();
        }
        return canAssignTask;
    }

    private boolean isApproverUser(String loggedInUserRole) {
        boolean isApprover = false;

        String loggedInUserType = userService.getUserType(loggedInUserRole);
        if (loggedInUserType != null) {
            if (loggedInUserType.equalsIgnoreCase(approverUser)) {
                isApprover = true;
            }
        }
        return isApprover;
    }

    @Override
    public ToDoTask getById(String id) {
        ToDoTask toDoTask = toDoTaskRepository.getById(id);
        if (toDoTask.getRequestBody() != null)
            toDoTask.setRequest(new JSONObject(new JSONTokener(toDoTask.getRequestBody())));
        return toDoTask;
    }

    @Override
    public ToDoTaskResponse view(String id) throws OperationException, IOException, JSONException {
        ToDoTask toDoTask = getById(id);

        String loggedInUser = userService.getLoggedInUserId();
        if (toDoTask != null) {
            String fileHandler = toDoTask.getFileHandlerId();
            if (fileHandler != null && loggedInUser != null &&
                    loggedInUser.equalsIgnoreCase(fileHandler)) {
                toDoTask.getToDoTaskDetails().setRead(true);
                toDoTask.getToDoTaskDetails().setReadTime(System.currentTimeMillis());
                toDoTask.setTaskStatus(ToDoTaskStatusValues.IN_PROGRESS);
                toDoTask = this.internalSave(toDoTask);

                ZonedDateTime dueOnDate = toDoTask.getDueOn();
                if (dueOnDate != null) {
                    boolean taskOverDueFlag = dueOnDate.isBefore(ZonedDateTime.now());
                    toDoTask.setOverdue(taskOverDueFlag);
                }
            }
            preProcessBeforeEveryGet(toDoTask);
            return getToDoResponse(toDoTask);
        } else {
            throw new OperationException(Constants.ER01);
        }
    }

    @Override
    @org.springframework.transaction.annotation.Transactional(noRollbackFor = Exception.class)
    public ToDoTask save(ToDoTaskResource resource) throws
            OperationException, InvocationTargetException, IllegalAccessException, IOException, JSONException {

        if (resource == null) {
            log.error("A task cannot be created with null resource");
            throw new OperationException("A task cannot be created with null resource");
        }

        String id = resource.getId();
        ToDoTask toDoTask = null;
        Boolean reOpen = false;

        if (!StringUtils.isEmpty(id)) {
            // checking task exists or not
            ToDoTask existingToDoTask = toDoTaskRepository.getById(id);
            if (existingToDoTask == null) {
                log.error("To-Do task not exists for id:" + id);
                throw new OperationException("To-Do task not exists for id:" + id);
            }

            if (resource.getTaskStatusId().equals("Open") //Change Id-id
                    && (existingToDoTask.getTaskStatus().getValue().equals(ToDoTaskStatusValues.FAILED.getValue())
                    || existingToDoTask.getTaskStatus().getValue().equals(ToDoTaskStatusValues.REJECTED.getValue())
                    || existingToDoTask.getTaskStatus().getValue().equals(ToDoTaskStatusValues.CLOSED.getValue()))) {
                reOpen = true;
            }

            NullAwareCopyUtils nullAwareCopyUtils = new NullAwareCopyUtils();
            nullAwareCopyUtils.copyProperties(existingToDoTask, resource);
            toDoTask = existingToDoTask;
            //this.allocateLockIfNotLocked(resource, toDoTask);

            this.checkUserCanUpdateRecord(resource, toDoTask);
            this.checkUserCanUpdateField(resource, toDoTask);
            this.populateTaskDetails(toDoTask, resource);
            this.copyEnumValues(toDoTask, resource);
            toDoTask.setLastModifiedTime(System.currentTimeMillis());
            toDoTask.setLastModifiedByUserId(userService.getLoggedInUserId());
        } else {
            toDoTask = new ToDoTask();
            CopyUtils.copy(resource, toDoTask);

            ToDoTaskDetails aTaskDetail = new ToDoTaskDetails();
            aTaskDetail.setRead(false);
            toDoTask.setToDoTaskDetails(aTaskDetail);
            String subTaskID = resource.getTaskSubTypeId();
            String subTaskDesc = ToDoTaskSubTypeValues.fromName(subTaskID).getSubTaskType();
            toDoTask.setTaskSubTypeDesc(subTaskDesc);
            this.populateTaskDetails(toDoTask, resource);
            this.setGenerationType(resource, toDoTask); //only called for a new class
            toDoTask.setOverdue(false);
//            toDoTask.setOverdue(System.currentTimeMillis() > toDoTask.getDueOn());
            toDoTask.setCreatedTime(System.currentTimeMillis());
            if (StringUtils.isEmpty(resource.getCreatedByUserId())) {
                toDoTask.setCreatedByUserId(userService.getLoggedInUserId());
            }
            this.validateMasterData(resource, toDoTask);
        }

        //TODO: Fix
        if (resource.getDueOnDate() != null) {
            ZonedDateTime dueDate = resource.getDueOnDate();
            toDoTask.setDueOn(dueDate);
        } else {
            toDoTask.setDueOn(ZonedDateTime.now().plusDays(1));
        }

        this.setTaskStatus(resource, toDoTask);
        this.setAssignedBy(resource, toDoTask);

        toDoTask = this.internalSave(toDoTask);

        if (toDoTask == null) {
            log.error("Task creation failed");
            throw new OperationException("Task creation failed");
        }

        if (toDoTask.getTaskStatus().toString().equals(ToDoTaskStatusValues.FAILED.toString())
                || toDoTask.getTaskStatus().toString().equals(ToDoTaskStatusValues.REJECTED.toString())) {
            this.closeFollowing(toDoTask);
        } else if (reOpen) {
            this.reopenFollowing(toDoTask);
        }

        this.sendCommunication(toDoTask, resource);

        return toDoTask;

    }

    //TODO: needs to handle this block on cluster env
    @Override
    public MessageResource getEditLock(String id, String userId) throws
            OperationException, IOException, JSONException {
        if (StringUtils.isEmpty(userId)) {
            throw new OperationException(ER01);
        }

        ToDoTask task = toDoTaskRepository.getById(id);

        if (task == null) {
            throw new OperationException(ER01);
        }

        ToDoTaskDetails taskDetails = task.getToDoTaskDetails();

        //second condition - the task we are talking about is not already locked

        if (task.getToDoTaskDetails().getRecordStatus() == null ||
                !task.getToDoTaskDetails().getRecordStatus().toString().equals(RecordStatusValues.LOCKED.toString())) {
            //set record status
            //third consition - the user is given by request
            //modify the original task and push it to db


            taskDetails.setRecordStatus(RecordStatusValues.LOCKED);
            taskDetails.setLockedBy(userId);
            taskDetails.setLastModifiedByUserIdUI(userId);
            taskDetails.setLastModifiedTimeUI(ZonedDateTime.now());
            task.setToDoTaskDetails(taskDetails);
            task = toDoTaskRepository.saveOrUpdate(task);
        } else {
            throw new OperationException(Constants.OPS_ERR_31109, taskDetails.getLockedBy());
        }

        MessageResource messageResource = new MessageResource();
        messageResource.setCode("SUCCESS");
        messageResource.setMessage("Lock acquired by " + userId);

        return messageResource;
    }

    @Override
    public MessageResource releaseLock(String id, String userId) throws
            OperationException, IOException, JSONException {

        if (StringUtils.isEmpty(userId)) {
            throw new OperationException(ER01);
        }

        ToDoTask task = toDoTaskRepository.getById(id);

        MessageResource messageResource = new MessageResource();

        if (task == null) {
            throw new OperationException(Constants.OPS_ERR_31103);
        }

        if (StringUtils.isEmpty(task.getToDoTaskDetails().getLockedBy())) {
            throw new OperationException(Constants.OPS_ERR_31132);
        }
        //second condition - the task we are talking about is not already locked
        if (task.getToDoTaskDetails().getRecordStatus() != null &&
                task.getToDoTaskDetails().getRecordStatus().toString().equals(RecordStatusValues.LOCKED.toString())) {
            //set record status
            //third consition - the user is given by request
            if (task.getToDoTaskDetails().getLockedBy().equals(userId)) {
                //modify the original task and push it to db
                ToDoTaskDetails taskDetails = task.getToDoTaskDetails();

                taskDetails.setRecordStatus(RecordStatusValues.ACTIVE);
                String lockedBy = taskDetails.getLockedBy();
                taskDetails.setLockedBy(null);
                task.setToDoTaskDetails(taskDetails);
                task = toDoTaskRepository.saveOrUpdate(task);
                messageResource.setCode("SUCCESS");
                messageResource.setMessage("Lock released by " + toDoMdmService.getUserById(lockedBy).getName());
            } else {
                throw new OperationException(Constants.OPS_ERR_31131,
                        toDoMdmService.getUserById(task.getToDoTaskDetails().getLockedBy()).getName());
            }
        }

        return messageResource;
    }

    @Override
    public ToDoTask approve(ToDoTaskResource resource) throws
            OperationException, InvocationTargetException, IllegalAccessException, IOException, JSONException {
        //Check if task is waiting for approval
        String id = resource.getId();
        if (StringUtils.isEmpty(id)) {
            log.error("Id must not be null, when requesting approval of a task");
            throw new OperationException("Id does not exist");
        }

        ToDoTask toDoTask = toDoTaskRepository.getById(id);
        if (toDoTask == null) {
            log.error("The task to approve does not exist");
            throw new OperationException("The task to approve does not exist");
        }

        if (!toDoTask.getTaskStatus().toString().equals(ToDoTaskStatusValues.NEW.toString())
                || !toDoTask.getTaskGeneratedType().toString().equals(ToDoTaskGeneratedTypeValues.MANUAL.toString())) {
            log.error("The task is not waiting for approval");
            throw new OperationException("The task being edited is not waiting to be approved");
        }

        if (toDoTask.getFileHandlerId() != null) {
            resource.setTaskStatusId(ToDoTaskStatusValues.ASSIGNED.getValue());
        } else {
            resource.setTaskStatusId(ToDoTaskStatusValues.OPEN.getValue());
        }

        return save(resource);
    }

    @Override
    public ToDoTask viewThresholdReached(String id) throws OperationException {
        String taskId = id.substring(id.indexOf('_'));
        ToDoTask task = toDoTaskRepository.getById(taskId);

        if (task == null) {
            log.error("The requested task does not exist.");
            throw new OperationException("The requested task does not exist.");
        }

        if (task.getToDoTaskDetails().getRead()) {
            return null;
        }

        if (task.getSecondaryFileHandlerId() == null) {
            //TODO : Excalate communication to supervisor, asking to manually assign the task to some user
            //changing the status of task back to OPEN,
            task.setTaskStatus(ToDoTaskStatusValues.OPEN);
            task.setLastModifiedTime(System.currentTimeMillis());
            //TODO : modify in case if id for SYSTEM changes
            task.setLastModifiedByUserId("SYSTEM");
            task = internalSave(task);
            return task;
        }

        //reassign
        task.setFileHandlerId(task.getSecondaryFileHandlerId());
        task.setSecondaryFileHandlerId(null);
        task.setLastModifiedTime(System.currentTimeMillis());
        //TODO : modify in case if id for SYSTEM changes
        task.setLastModifiedByUserId("SYSTEM");
        task = internalSave(task);
        //TODO : view threshold timer to be set
        //initiateViewTimer(task);
        return task;
    }

    @Override
    public ToDoTask dueThresholdReached(String id) throws OperationException {
        ToDoTask task = toDoTaskRepository.getById(id);

        if (task == null) {
            log.error("The requested task does not exist.");
            throw new OperationException("The requested task does not exist.");
        }

        ToDoTaskDetails toDoTaskDetails = task.getToDoTaskDetails();
        toDoTaskDetails.setLastModifiedTimeUI(ZonedDateTime.now());
        //TODO : chnage when id for SYSTEM changes
        toDoTaskDetails.setLastModifiedByUserIdUI("SYSTEM");
        task.setToDoTaskDetails(toDoTaskDetails);
        //assigning the task to second user if present
        if (task.getSecondaryFileHandlerId() == null) {
            //TODO : Escalate communication to supervisor, asking to manually assign the task to some user
            return task;
        }
        //TODO : Excalate communication to supervisor, asking to manually assign the task to some user
        task.setSecondaryFileHandlerId(task.getSecondaryFileHandlerId());
        task.setSecondaryFileHandlerId(null);
        task.setOverdue(true);
        task.setLastModifiedByUserId("SYSTEM");
        task.setLastModifiedTime(System.currentTimeMillis());
        task = internalSave(task);

        if (task == null) {
            log.error("Task creation failed");
            throw new OperationException("Task ceation failed");
        }

        return task;
    }

    @Override
    public List<UserSummary> getUserSummary() throws OperationException, IOException, JSONException {

        List<UserSummary> userSummaryList = new LinkedList<>();
        String userId = userService.getLoggedInUserId();
        List<ToDoUserResource> userResources = toDoMdmService.getSubordinates(userId);
        userResources.add(0, toDoMdmService.getUserById(userId));

        // *** BEGIN - New Code ***
        ToDoCriteria toDoCriteria = new ToDoCriteria();
        String[] taskStatuses = {"Assigned", "Pending", "In progress", "New", "Open"};
        toDoCriteria.setTaskStatusIds(taskStatuses);
        toDoCriteria.setPageNumber(1);
        toDoCriteria.setPageSize(Integer.MAX_VALUE);

        // check for User type; if its OpsApproverUser, then fetch user summary for Approver user
        // Otherwise, fetch for current logged in userId
        UserType anUserType = this.getUserType();
        if (anUserType.equals(UserType.OPS_USER)) {
            toDoCriteria.setFileHandlerIds(new String[]{userId});
        }

        List<ToDoUserResource> toUsrResourceList = new ArrayList<>();
        Set<String> fileHandlersSet = new HashSet<>();
        HashMap<String, UserSummary> usrSummaryMap = new HashMap<>();

        List<ToDoTask> tasks = toDoTaskRepository.getByCriteria(toDoCriteria, false).getContent();
        log.info("Number of To Do Tasks is: " + tasks.size());
        if (tasks != null && tasks.size() > 0) {
            for (ToDoTask aTask : tasks) {

                String fileHandlerID = aTask.getFileHandlerId();
                if (fileHandlerID == null) {
                    fileHandlerID = FILE_HANDLER_UNASSIGNED;
                }
                fileHandlersSet.add(fileHandlerID);

                UserSummary aUserSummary = new UserSummary();

                if (usrSummaryMap.containsKey(fileHandlerID)) {
                    aUserSummary = usrSummaryMap.get(fileHandlerID);
                } else {
                    ToDoUserResource aUserResource = new ToDoUserResource();
                    aUserResource.setId(fileHandlerID);
                    aUserSummary.setUserId(aUserResource);
                    aUserSummary.setFileHandlerID(fileHandlerID);
                    usrSummaryMap.put(fileHandlerID, aUserSummary);
                }

                List<StatusCount> statusCountsList = aUserSummary.getStatusCounts();
                if (statusCountsList == null) {
                    statusCountsList = new ArrayList<>();
                    aUserSummary.setStatusCounts(statusCountsList);
                }

                ToDoTaskStatusValues aTaskStatus = aTask.getTaskStatus();
                String todoStatus = aTaskStatus.getValue();
                aUserSummary.incrementStatusCount(todoStatus);
            }
        }

        userSummaryList.addAll(usrSummaryMap.values());

        if (fileHandlersSet.size() > 0) {
            for (String aUsrID : fileHandlersSet) {
                ToDoUserResource aTmpUsrResource = new ToDoUserResource();
                aTmpUsrResource.setId(aUsrID);
                toUsrResourceList.add(aTmpUsrResource);
            }
        }

        Map<String, ToDoUserResource> allUsersMap = toDoMdmService.getUsersMap(toUsrResourceList);

        if ((allUsersMap.size() > 0) &&
                (userSummaryList != null && userSummaryList.size() > 0)) {
            for (ToDoUserResource aUsrResource : toUsrResourceList) {
                String fileHandlerID = aUsrResource.getId();
                UserSummary existingUsrSummary = usrSummaryMap.get(fileHandlerID);
                if (allUsersMap.containsKey(fileHandlerID)) {
                    existingUsrSummary.setUserId(allUsersMap.get(fileHandlerID));
                } else {
                    aUsrResource.setName(aUsrResource.getId());
                    existingUsrSummary.setUserId(aUsrResource);
                }

                List<StatusCount> statusList = existingUsrSummary.getStatusCounts();
                if (statusList != null && statusList.size() > 0) {
                    long countOfToDoTasks = 0;
                    for (StatusCount aStatusCount : statusList) {
                        long aStatusCountCount = aStatusCount.getCount();
                        countOfToDoTasks = countOfToDoTasks + aStatusCountCount;
                    }
                    existingUsrSummary.setTotal(countOfToDoTasks);
                }
            }
        }
        // *** END - New Code ***

        return userSummaryList;
    }


    @Override
    public List<StatusSummary> getStatusSummary() throws OperationException, IOException, JSONException {
        Long overdueCount;
        Long notOverdueCount;
        Long totalNotOverdueCount = 0L;
        Long totalOverdueCount = 0L;

        ToDoCriteria toDoCriteria;
        List<StatusSummary> statusSummary = new LinkedList<>();
        List<UserCount> userCounts = new LinkedList<>();

        List<ToDoUserResource> userResources = toDoMdmService.getSubordinates(userService.getLoggedInUserId());
        userResources.add(0, toDoMdmService.getUserById(userService.getLoggedInUserId()));

        String[] statuses = {"Assigned", "Pending", "In Progress"};
        for (String status : statuses) {
            StatusSummary tempStatusSummary = new StatusSummary();
            tempStatusSummary.setToDoStatus(status);

            toDoCriteria = new ToDoCriteria();
            String[] searchStatuses = {status};
            String[] users = userResources.stream().map(ToDoUserResource::getId).toArray(String[]::new);
            List<ToDoTask> tasks = toDoTaskRepository.getByCriteria(toDoCriteria, false).getContent();

            if (tasks.size() != 0) {
                for (String user : users) {
                    overdueCount = tasks.stream().filter(
                            t ->
                            {
                                if (t.getFileHandlerId() == null) {
                                    return false;
                                } else if (t.getFileHandlerId().equals(user) && t.getOverdue()) {
                                    return true;
                                }
                                return false;
                            }
                    ).count();

                    notOverdueCount = tasks
                            .stream()
                            .filter(
                                    t ->
                                    {
                                        if (t.getFileHandlerId() == null) {
                                            return false;
                                        } else if (t.getFileHandlerId().equals(user) && !t.getOverdue()) {
                                            return true;
                                        }
                                        return false;
                                    }
                            )
                            .count();

                    totalOverdueCount += overdueCount;
                    totalNotOverdueCount += notOverdueCount;

                    if (overdueCount > 0 || notOverdueCount > 0) {
                        tempStatusSummary
                                .getUserSummaries()
                                .add(new UserCount(userResources
                                        .stream()
                                        .filter(t -> t.getId().equals(user))
                                        .findFirst()
                                        .get(),
                                        overdueCount,
                                        notOverdueCount));
                    }
                }
            }
            tempStatusSummary.setTotalOverdue(totalOverdueCount);
            tempStatusSummary.setTotalNotOverdue(totalNotOverdueCount);

            if (totalOverdueCount > 0 || totalNotOverdueCount > 0) {
                statusSummary.add(tempStatusSummary);
            }

            totalNotOverdueCount = 0L;
            totalOverdueCount = 0L;
        }

        return statusSummary;
    }

    @Override
    public void delete(String id) {
        toDoTaskRepository.deleteById(id);
    }

    private void checkUserCanUpdateField(ToDoTaskResource resource, ToDoTask toDoTask) {
        String userId = userService.getLoggedInUserId();
        //TODO : system id is assumed to be SYSTEM. Change in case needed
        if (userId.equals("SYSTEM")) {
            //If any constraints to be added for field updates by system, add here.
            return;
        }

        if (toDoTask.getTaskGeneratedType().toString().equals(ToDoTaskGeneratedTypeValues.MANUAL.toString())) {
            /**
             * Check if user is supervisor,
             *      if user is a supervisor he/she can edit
             *          priority if the task is created by him/her or his/her subordinate
             *          due date - check if task is overdue and if it is,
             *              Reset the timer to new file
             *              Reser overdue flag
             *          file handlers
             *          functional area
             *
             * Check if it is a normal user
             *      if user is normal user he/she can edit
             *          Task name
             *          Suggested actions
             *          priority if he/she has created the task
             */
        } else if (toDoTask.getTaskGeneratedType().toString().equals(ToDoTaskGeneratedTypeValues.AUTO.toString())) {
            /**
             * Check if user is supervisor,
             *      if user is a supervisor he/she can edit
             *          priority
             *
             * Check if it is a normal user
             *      if user is normal user he/she can edit
             *
             */
        }
    }

    @org.springframework.transaction.annotation.Transactional(noRollbackFor = Exception.class)
    private ToDoTask internalSave(ToDoTask toDoTask) throws OperationException {


        //TODO: uncomment duplicate detection once it is complete
        ToDoResponse toDoResponse = getDuplicate(toDoTask);
        if (toDoResponse != null && toDoResponse.getContent() != null
                && toDoResponse.getContent().size() > 0) {

            if (!(toDoResponse.getContent().get(0).getId().equalsIgnoreCase(toDoTask.getId())) &&
                    !CollectionUtils.isEmpty(toDoResponse.getContent())) {
                throw new OperationException(Constants.OPS_ERR_31128, toDoResponse.getContent().get(0).getId());
            }

        }

        if (toDoTask.getDueOn() != null) {
            validateDueDate(toDoTask.getDueOn());
            boolean isOverDue = ZonedDateTime.now().isAfter(toDoTask.getDueOn());
            toDoTask.setOverdue(isOverDue);
        }

        try {
            toDoTask = toDoTaskRepository.saveOrUpdate(toDoTask);
//            if (toDoTask.getTaskType().equals(ToDoTaskTypeValues.SUB)) {
//                ToDoTask parentTask = toDoTask.getParentToDoTask();
//                parentTask.setChildToDoTasks(Arrays.asList(toDoTask));
//                toDoTaskRepository.saveOrUpdate(toDoTask.getParentToDoTask());
//            } else {
//                toDoTask = toDoTaskRepository.saveOrUpdate(toDoTask);
//            }
//
//  this.activateFollowing(toDoTask);
//            this.activateSubTasks(toDoTask);
            //            initiateDueTimer(toDoTask);
        } catch (Exception e) {
            log.error("Internal error occurred while creating a new To-Do task");
            e.printStackTrace();
            throw new OperationException("Error occurred while creating task!");
        }

        return toDoTask;
    }

    private void setAssignedBy(ToDoTaskResource resource, ToDoTask task) {
        String id = task.getId();

        if (StringUtils.isEmpty(id) &&
                (resource.getFileHandlerId() != null && resource.getFileHandlerId().trim().length() > 0)) {
            task.setAssignedBy(userService.getLoggedInUserId());
        } else {
            if (!StringUtils.isEmpty(resource.getFileHandlerId()) || !StringUtils.isEmpty(task.getFileHandlerId())) {
                task.setAssignedBy(userService.getLoggedInUserId());
            }
        }
    }

    private void setTaskStatus(ToDoTaskResource resource, ToDoTask task) throws OperationException {
        ToDoTaskStatusValues toDoTaskStatusValues = null;
        Long millis = 3600 * 24 * 2L;//ToDo: Set this value to default view threshold

        if (StringUtils.isEmpty(task.getId())) {
            if (StringUtils.isEmpty(task.getFileHandlerId())) {
                toDoTaskStatusValues = ToDoTaskStatusValues.OPEN;
            } else {
                toDoTaskStatusValues = ToDoTaskStatusValues.ASSIGNED;
            }
        } else {
            //TODO : check if a task can go to that status
            //TODO : start read timer if user manually updates a task from open to assigned status.
            //TODO : start read timer if user manually reassigns the task to another user
            ToDoTaskStatusValues oldStatus = task.getTaskStatus();
            if (oldStatus.getValue().equals(ToDoTaskStatusValues.OPEN.getValue())) {
                if (resource.getFileHandlerId() != null && task.getFileHandlerId() != null) {
                    if (!resource.getFileHandlerId().equals(task.getFileHandlerId())) {
                        toDoTaskStatusValues = ToDoTaskStatusValues.ASSIGNED;
                    }
                } else {
                    toDoTaskStatusValues = ToDoTaskStatusValues.fromString(resource.getTaskStatusId());
                }
            } else {
                toDoTaskStatusValues = ToDoTaskStatusValues.fromString(resource.getTaskStatusId());//Change Id-id
            }
        }

        if (toDoTaskStatusValues == null) {
            //TODO : Throw appropriate exception
            throw new OperationException("To Do status does not exist.");
        }
        task.setTaskStatus(toDoTaskStatusValues);
    }

    @Transactional
    private void populateTaskDetails(ToDoTask task, ToDoTaskResource resource) throws OperationException {
        ToDoTaskDetails taskDetails = task.getToDoTaskDetails();
        if (taskDetails == null) {
            taskDetails = new ToDoTaskDetails();
        }
        if (task.getId() != null) {
            taskDetails.setRead(false);
        }

//        RecordStatusValues recordStatusValues = RecordStatusValues.ACTIVE;
//        String taskStatusId = resource.getTaskStatusId();
//        ToDoTaskStatusValues toDoTaskStatusValues = ToDoTaskStatusValues.fromString(taskStatusId);
//        if (toDoTaskStatusValues != null) {
//            if (toDoTaskStatusValues.toString().equalsIgnoreCase(ToDoTaskStatusValues.COMPLETED.toString())
//                    || toDoTaskStatusValues.toString().equalsIgnoreCase(ToDoTaskStatusValues.CLOSED.toString())
//                    || toDoTaskStatusValues.toString().equalsIgnoreCase(ToDoTaskStatusValues.FAILED.toString())) {
//                recordStatusValues = RecordStatusValues.INACTIVE;
//            }
//        }

        ToDoClientResource toDoClientResource =
                toDoMdmService.getClientById(
                        resource.getClientTypeId(), resource.getClientId(),
                        resource.getClientCategoryId(), resource.getClientSubCategoryId());

        task.setClientName(toDoClientResource.getClientName());

//        taskDetails.setRecordStatus(recordStatusValues);
        taskDetails.setLastModifiedTimeUI(ZonedDateTime.now());
        taskDetails.setLastModifiedByUserIdUI(userService.getLoggedInUserId());
        task.setToDoTaskDetails(taskDetails);
    }

    private void sendCommunication(ToDoTask task, ToDoTaskResource resource) {
        if (task.getParentToDoTask() != null
                && !task.getParentToDoTask().getTaskType().toString().equals(MAIN.toString())) {
            //TODO - I need to send a message.
        }

        if (task.getParentToDoTask() != null
                && !task.getParentToDoTask().getId().equals(resource.getMainTaskId())) {
            //TODO - I need to send a message.
        }
    }

    private void activateFollowing(ToDoTask task) throws OperationException {
        List<ToDoTask> followingTasks;
        ToDoTaskDetails taskDetails;

        followingTasks = task.getChildToDoTasks();
        if (followingTasks == null || followingTasks.size() == 0) {
            return;
        }

        followingTasks = followingTasks.stream()
                .filter(t -> t.getTaskType().toString().equals(FOLLOWING.toString())
                        && t.getMainTaskStatus().toString().equals(task.getTaskStatus().toString()))
                .collect(Collectors.toList());

        for (ToDoTask followingTask : followingTasks) {
            followingTask.setLastModifiedTime(System.currentTimeMillis());
            followingTask.setLastModifiedByUserId("SYSTEM");
            taskDetails = followingTask.getToDoTaskDetails();


            //RecordStatusValues recordStatusValues = RecordStatusValues.ACTIVE;
            //taskDetails.setRecordStatus(recordStatusValues);

            ToDoTaskStatusValues toDoTaskStatusValues = ToDoTaskStatusValues.ASSIGNED;
            followingTask.setTaskStatus(toDoTaskStatusValues);
            taskDetails.setRead(false);
            followingTask = this.internalSave(followingTask);
            activateSubTasks(followingTask);
        }
    }

    private void activateSubTasks(ToDoTask task) throws OperationException {
        List<ToDoTask> subTasks;
        ToDoTaskDetails taskDetails;

        subTasks = task.getChildToDoTasks();
        if (subTasks == null) {
            return;
        }

        subTasks = subTasks.stream()
                .filter(t -> t.getTaskStatus().toString().equals(ToDoTaskTypeValues.SUB.toString()))
                .collect(Collectors.toList());

        for (ToDoTask subTask : subTasks) {
            subTask.setLastModifiedTime(System.currentTimeMillis());
            subTask.setLastModifiedByUserId("SYSTEM");
            taskDetails = subTask.getToDoTaskDetails();

//            RecordStatusValues recordStatusValues = RecordStatusValues.ACTIVE;
//            taskDetails.setRecordStatus(recordStatusValues);

            if (subTask.getFileHandlerId() == null) {
                subTask.setFileHandlerId(task.getFileHandlerId());
            }

            subTask.setTaskStatus(ToDoTaskStatusValues.ASSIGNED);
            taskDetails.setRead(false);
            subTask.setAlertNotified(false);
            this.internalSave(subTask);
        }
    }

    private void closeFollowing(ToDoTask task) throws OperationException {
        List<ToDoTask> followingTasks;
        ToDoTaskDetails taskDetails;

        followingTasks = task.getChildToDoTasks();
        if (followingTasks == null) {
            return;
        }

        for (ToDoTask followingTask : followingTasks) {
            followingTask.setLastModifiedTime(System.currentTimeMillis());
            followingTask.setLastModifiedByUserId("SYSTEM");
            taskDetails = followingTask.getToDoTaskDetails();

            taskDetails.setRecordStatus(RecordStatusValues.INACTIVE);

            if (followingTask.getFileHandlerId() == null) {
                followingTask.setFileHandlerId(task.getFileHandlerId());
            }

            followingTask.setTaskStatus(ToDoTaskStatusValues.CLOSED);
            this.internalSave(followingTask);
        }
    }

    private void reopenFollowing(ToDoTask task) throws OperationException {
        List<ToDoTask> followingTasks;
        ToDoTaskDetails taskDetails;

        followingTasks = task.getChildToDoTasks();
        if (followingTasks == null) {
            return;
        }

        for (ToDoTask followingTask : followingTasks) {
            followingTask.setLastModifiedTime(System.currentTimeMillis());
            followingTask.setLastModifiedByUserId("SYSTEM");
            taskDetails = followingTask.getToDoTaskDetails();

            //taskDetails.setRecordStatus(RecordStatusValues.ACTIVE);

            if (followingTask.getFileHandlerId() == null) {
                followingTask.setFileHandlerId(task.getFileHandlerId());
            }

            ToDoTaskStatusValues toDoTaskStatusValues;
            if (followingTask.getFileHandlerId() != null) {
                toDoTaskStatusValues = ToDoTaskStatusValues.ASSIGNED;
            } else {
                toDoTaskStatusValues = ToDoTaskStatusValues.OPEN;
            }

            followingTask.setTaskStatus(toDoTaskStatusValues);
            this.internalSave(followingTask);
        }
    }

    private void validateMasterData(ToDoTaskResource resource, ToDoTask toDoTask) throws OperationException {
        //functional area
        String toDoFunctionalAreaValue = resource.getTaskFunctionalAreaId();
        if (toDoFunctionalAreaValue == null && resource.getId() == null)
            throw new OperationException("Functional area is null");
        else if (toDoFunctionalAreaValue != null) {
            ToDoFunctionalAreaValues toDoFunctionalAreaValues = ToDoFunctionalAreaValues.fromString(toDoFunctionalAreaValue);//Change Id-id
            if (toDoFunctionalAreaValues == null) {
                throw new OperationException("FunctionalArea is invalid");
            }
            toDoTask.setTaskFunctionalArea(toDoFunctionalAreaValues);
        }

        String toDoTaskTypeValue = resource.getTaskTypeId();
        if (toDoTaskTypeValue == null && resource.getId() == null) {
            throw new OperationException("Task type is null");
        } else if (toDoTaskTypeValue != null) {
            ToDoTaskTypeValues toDoTaskTypeValues = ToDoTaskTypeValues.fromString(resource.getTaskTypeId());//Change Id-id
            if (toDoTaskTypeValues == null) {
                if (StringUtils.isEmpty(resource.getId()))
                    throw new OperationException("TaskType is invalid");
            }
            toDoTask.setTaskType(toDoTaskTypeValues);
        }


        String toDoTaskNameValue = resource.getTaskNameId();
        if (toDoTaskNameValue == null && resource.getId() == null) {
            throw new OperationException("Task name is null");
        } else if (toDoTaskNameValue != null) {
            ToDoTaskNameValues taskNameValues = ToDoTaskNameValues.fromString(toDoTaskNameValue);//Change Id-id
            if (taskNameValues == null) {
                if (StringUtils.isEmpty(resource.getId()))
                    throw new OperationException("Task Name is invalid");
            }
            toDoTask.setTaskName(taskNameValues);
        }


        String toDoTaskSubTypeValues = resource.getTaskSubTypeId();

        if (toDoTaskSubTypeValues == null && resource.getId() == null) {
            throw new OperationException("Task sub type is null");
        } else if (toDoTaskSubTypeValues != null) {
            toDoTask.setTaskSubType(ToDoTaskSubTypeValues.fromName(toDoTaskSubTypeValues));
        }

        String toDoTypeOrientedValues = resource.getTaskOrientedTypeId();

        if (toDoTypeOrientedValues == null && resource.getId() == null) {
            //TODO: uncomment later.
//            throw new OperationException("To-Do Oriented Type Value is null");
        } else if (toDoTypeOrientedValues != null) {
            toDoTask.setTaskOrientedType(ToDoTaskOrientedValues.fromString(toDoTypeOrientedValues));
        }

        String toDoTaskPriorityValues;
        if (resource.getTaskPriorityId() == null) {
            toDoTask.setTaskPriority(ToDoTaskPriorityValues.MEDIUM);
        } else {
            toDoTaskPriorityValues = resource.getTaskPriorityId();//Change Id-id
            if (!StringUtils.isEmpty(toDoTaskPriorityValues)) {
                ToDoTaskPriorityValues toDoPriority = ToDoTaskPriorityValues.fromString(toDoTaskPriorityValues);
                if (toDoPriority != null) {
                    toDoTask.setTaskPriority(toDoPriority);
                } else {
                    throw new OperationException("To Do priority is invalid");
                }
            } else {
                if (StringUtils.isEmpty(resource.getId()))
                    throw new OperationException("Priority with given Id does not exist!");
            }
        }

        //Rather than setting generated type based on user input, setting it automatically, at system level
        ToDoTaskTypeValues toDoTypeId = toDoTask.getTaskType();
        if (toDoTypeId.equals(ToDoTaskTypeValues.FOLLOWING)
                || toDoTypeId.equals(ToDoTaskTypeValues.SUB)) {
            String mainTaskId = resource.getMainTaskId();

            ToDoTaskNameValues toDoTaskNameValues = ToDoTaskNameValues.fromString(resource.getMainTaskName());
            if (toDoTaskNameValues != null) {
                toDoTask.setMainTaskNameValue(toDoTaskNameValues);
            } else {
                throw new OperationException(Constants.OPS_ERR_31134);
            }

            ToDoTask todoMainTask = null;

            if (StringUtils.isEmpty(mainTaskId)) {
                ToDoResponse toDoResponse = getMainTask(toDoTask);
                mainTaskId = toDoResponse.getContent().get(0).getId();
                todoMainTask = toDoTaskRepository.getById(mainTaskId);
            } else {
                todoMainTask = toDoTaskRepository.getById(mainTaskId);
                if (todoMainTask == null) {
                    throw new OperationException(Constants.OPS_ERR_31130);
                }
            }

            if (todoMainTask == null) {
                throw new OperationException(Constants.OPS_ERR_31129);
            }


            toDoTask.setParentToDoTask(todoMainTask);

            String mainTaskStatusTriggerId = resource.getMainTaskStatusTriggerId();//Change Id-id
            if (toDoTypeId.equals(ToDoTaskTypeValues.FOLLOWING) && mainTaskStatusTriggerId == null) {
                log.error("Following task cannot be created unless the status to trigger it is specified");
                throw new OperationException("Following task cannot be created unless the status to trigger it is specified");
            }

            if (!toDoTypeId.equals(ToDoTaskTypeValues.SUB)) {
                ToDoTaskStatusValues toDoMainTaskTriggerStatus = ToDoTaskStatusValues.fromString(mainTaskStatusTriggerId);
                if (toDoMainTaskTriggerStatus == null) {
                    if (StringUtils.isEmpty(resource.getId()))
                        throw new OperationException(ER01);
                }
                toDoTask.setMainTaskStatus(toDoMainTaskTriggerStatus);
            }
        }

        //TODO: check following
    }

    public ToDoResponse getDuplicate(ToDoTask toDoTask) throws OperationException {
        if (toDoTask == null) {
            log.error("Duplicates cannot be checked for a null task.");
            throw new OperationException("Duplicates cannot be checked for a null task.");
        }

        ToDoCriteria criteria = new ToDoCriteria();
        criteria.setReferenceId(toDoTask.getReferenceId());
        criteria.setTaskTypeId(toDoTask.getTaskType().getValue());
        criteria.setTaskSubTypeId(toDoTask.getTaskSubType().name());
        criteria.setTaskNameId(toDoTask.getTaskName().getValue());
        criteria.setClientTypeId(toDoTask.getClientTypeId());
        criteria.setProductId(toDoTask.getProductId());
        criteria.setCompanyId(toDoTask.getCompanyId());
        criteria.setBookingRefId(toDoTask.getBookingRefId());
        ToDoResponse toDoResponse = toDoTaskRepository.getByCriteria(criteria, true);
        return toDoResponse;
    }

    private ToDoResponse getMainTask(ToDoTask toDoTask) throws OperationException {
        if (toDoTask == null) {
            log.error("Duplicates cannot be checked for a null task.");
            throw new OperationException("Duplicates cannot be checked for a null task.");
        }
        ToDoTaskTypeValues toDoTaskTypeValues = toDoTask.getTaskType();
        ToDoTaskNameValues toDoTaskNameValues = toDoTask.getTaskName();

        toDoTask.setTaskType(ToDoTaskTypeValues.MAIN);
        toDoTask.setTaskName(toDoTask.getMainTaskNameValue());

        ToDoCriteria criteria = new ToDoCriteria();
        criteria.setReferenceId(toDoTask.getReferenceId());
        criteria.setTaskTypeId(toDoTask.getTaskType().getValue());
        criteria.setTaskNameId(toDoTask.getTaskName().getValue());
        criteria.setClientTypeId(toDoTask.getClientTypeId());
        criteria.setProductId(toDoTask.getProductId());
        criteria.setCompanyId(toDoTask.getCompanyId());
        criteria.setBookingRefId(toDoTask.getBookingRefId());
        ToDoResponse toDoResponse = toDoTaskRepository.getByCriteria(criteria, true);

        if (toDoResponse != null && toDoResponse.getContent() != null) {
            if (toDoResponse.getContent().size() == 0) {
                throw new OperationException(Constants.OPS_ERR_31130);
            }
            if (toDoResponse.getContent().size() > 1) {
                throw new OperationException(Constants.OPS_ERR_31133);
            }
        }

        toDoTask.setTaskType(toDoTaskTypeValues);
        toDoTask.setTaskName(toDoTaskNameValues);

        return toDoResponse;
    }

    private void validateDueDate(ZonedDateTime dueOn) {
//        if(!ZonedDateTime.now().isAfter(dueOn))
        //throw new OperationException("Due date not in future. The dueOn field must be set to some date in future");
    }

    private void validatePriorityUpdate(ToDoTaskResource resource, ToDoTask toDoTask) throws OperationException {
        //TODO: load user and validate user is super user or ops user, super user can change priority of manual and
        // auto task. Ops user can change own task(self created) task
    }

    private void setGenerationType(ToDoTaskResource resource, ToDoTask toDoTask) {
        ToDoTaskGeneratedTypeValues toDoTaskGeneratedType;
        //TODO : if id for system is changed, then modify here
        if (!StringUtils.isEmpty(resource.getTaskGeneratedTypeId())
                && resource.getTaskGeneratedTypeId().equalsIgnoreCase(ToDoTaskGeneratedTypeValues.AUTO.toString())) {
            toDoTaskGeneratedType = ToDoTaskGeneratedTypeValues.AUTO;
        } else {
            toDoTaskGeneratedType = ToDoTaskGeneratedTypeValues.MANUAL;
        }

        toDoTask.setTaskGeneratedType(toDoTaskGeneratedType);
    }

    private void checkUserCanUpdateRecord(ToDoTaskResource resource, ToDoTask toDoTask) throws
            OperationException, IOException {
        Boolean locked = false;
        if (toDoTask.getToDoTaskDetails().getRecordStatus() != null) {
            locked = toDoTask.getToDoTaskDetails().getRecordStatus().toString().equals(RecordStatusValues.LOCKED.toString());
        }
        String userId = userService.getLoggedInUserId();
        if (!locked) {
            //assign the lock to the user if it is not already locked
            //TODO : implementation depends on save/submit concept. Beware. Change when changing that.
            ToDoTaskDetails toDoTaskDetails = toDoTask.getToDoTaskDetails();
            toDoTaskDetails.setRecordStatus(RecordStatusValues.LOCKED);
            toDoTaskDetails.setLastModifiedByUserIdUI(userId);
            toDoTaskDetails.setLockedBy(userId);
            toDoTaskDetails.setLastModifiedTimeUI(ZonedDateTime.now());
            toDoTask.setToDoTaskDetails(toDoTaskDetails);
            return;
        }

        String lockedByUserID = toDoTask.getToDoTaskDetails().getLockedBy();
        boolean isLockedByUser = lockedByUserID.equalsIgnoreCase(userId);
        if (!isLockedByUser) {
            throw new OperationException(Constants.OPS_ERR_31109,
                    toDoMdmService.getUserById(lockedByUserID).getName());
        }

    }

    public ToDoTaskResponse getToDoResponse(ToDoTask toDoTask) throws
            OperationException, JSONException, IOException {
        ToDoTaskResponse toDoTaskResponse = new ToDoTaskResponse();
        String dueOn = toDoTask.getDueOn().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss[xxx]"));

        if (toDoTask.getRequestBody() != null)
            toDoTask.setRequest(new JSONObject(new JSONTokener(toDoTask.getRequestBody())));
        CopyUtils.copy(toDoTask, toDoTaskResponse);

        toDoTaskResponse.setDueOn(dueOn);
        toDoTaskResponse.setTaskFunctionalAreaValue(toDoTask.getTaskFunctionalArea().getValue());
        toDoTaskResponse.setTaskNameValue(toDoTask.getTaskName().getValue());
        toDoTaskResponse.setTaskPriorityValue(toDoTask.getTaskPriority().getValue());
        toDoTaskResponse.setTaskStatusValue(toDoTask.getTaskStatus().getValue());
        toDoTaskResponse.setTaskSubType(toDoTask.getTaskSubType().name());
        toDoTaskResponse.setTaskTypeValue(toDoTask.getTaskType().getValue());
        toDoTaskResponse.setUrl(toDoTask.getUrl());
        toDoTaskResponse.setBookingRefId(toDoTask.getBookingRefId());
        toDoTaskResponse.setProductName(toDoTask.getProductId());
        toDoTaskResponse.setRequest(toDoTask.getRequest());
        toDoTaskResponse.setProductCategory(toDoTask.getProductCategory());
        toDoTaskResponse.setProductSubCategory(toDoTask.getProductSubCategory());
        if (toDoTask.getTaskOrientedType() != null)
            toDoTaskResponse.setTaskOrientedValue(toDoTask.getTaskOrientedType().getValue());
        toDoTaskResponse.setCompany(toDoMdmService.getCompanyById(toDoTask.getCompanyId()));
        ToDoClientResource toDoClientResource = new ToDoClientResource();
        toDoClientResource.setClientType(toDoTask.getClientTypeId());
        toDoClientResource.setId(toDoTask.getClientId());
        toDoClientResource.setClientCategory(toDoTask.getClientCategoryId());
        toDoClientResource.setClientSubCategory(toDoTask.getClientSubCategoryId());
        toDoClientResource.setClientName(toDoTask.getClientName());
        toDoTaskResponse.setClient(toDoClientResource);
        toDoTaskResponse.setCompanyMarket(toDoMdmService.getCompanyMarketById(toDoTask.getCompanyMarketId()));

        toDoTaskResponse.setAssignedByUser(toDoMdmService.getUserById(toDoTask.getAssignedBy()));
        toDoTaskResponse.setFileHandler(toDoMdmService.getUserById(toDoTask.getFileHandlerId()));
        toDoTaskResponse.setSecondaryFileHandler(toDoMdmService.getUserById(toDoTask.getSecondaryFileHandlerId()));
        if (toDoTask.getToDoTaskDetails() != null) {
            toDoTaskResponse.setRead(toDoTask.getToDoTaskDetails().getRead());
        }

        return toDoTaskResponse;
    }

    public List<ToDoTaskResponse> getToDoResponses(List<ToDoTask> toDoTasks) throws
            JSONException, IOException, OperationException {
        List<ToDoTaskResponse> toDoTaskResponses = new ArrayList<>();

        for (ToDoTask toDoTask : toDoTasks) {
            if (toDoTask.getRequestBody() != null)
                toDoTask.setRequest(new JSONObject(new JSONTokener(toDoTask.getRequestBody())));
            ToDoTaskResponse toDoTaskResponse = new ToDoTaskResponse();
            CopyUtils.copy(toDoTask, toDoTaskResponse);
            toDoTaskResponse.setId(toDoTask.getId());//CopyUtils.copy fails to copy id.
            toDoTaskResponse.setUrl(toDoTask.getUrl());
            toDoTaskResponse.setBookingRefId(toDoTask.getBookingRefId());
            toDoTaskResponse.setProductName(toDoTask.getProductId());
            toDoTaskResponse.setProductCategory(toDoTask.getProductCategory());
            toDoTaskResponse.setProductSubCategory(toDoTask.getProductSubCategory());

            if (toDoTask.getTaskOrientedType() != null)
                toDoTaskResponse.setTaskOrientedValue(toDoTask.getTaskOrientedType().getValue());

            toDoTaskResponse.setTaskFunctionalAreaValue(toDoTask.getTaskFunctionalArea().getValue());
            toDoTaskResponse.setTaskNameValue(toDoTask.getTaskName().getValue());
            toDoTaskResponse.setTaskPriorityValue(toDoTask.getTaskPriority().getValue());
            toDoTaskResponse.setTaskStatusValue(toDoTask.getTaskStatus().getValue());
            toDoTaskResponse.setTaskSubType(toDoTask.getTaskSubType().name());
            toDoTaskResponse.setTaskTypeValue(toDoTask.getTaskType().getValue());
            ToDoClientResource toDoClientResource = new ToDoClientResource();
            toDoClientResource.setClientType(toDoTask.getClientTypeId());
            toDoClientResource.setId(toDoTask.getClientId());
            toDoClientResource.setClientCategory(toDoTask.getClientCategoryId());
            toDoClientResource.setClientSubCategory(toDoTask.getClientSubCategoryId());
            toDoClientResource.setClientName(toDoTask.getClientName());
            toDoTaskResponse.setClient(toDoClientResource);
            String companyMarketId = toDoTask.getCompanyMarketId();
            toDoTaskResponse.setCompanyMarket(toDoMdmService.getCompanyMarketById(companyMarketId));
            if (toDoTask.getToDoTaskDetails() != null) {
                toDoTaskResponse.setRead(toDoTask.getToDoTaskDetails().getRead());
            }
            toDoTaskResponses.add(toDoTaskResponse);
        }

        List<ToDoCompanyResource> toDoCompanyResources = toDoTasks.stream().map(t ->
                new ToDoCompanyResource(null, t.getCompanyId())).collect(Collectors.toList());
        toDoCompanyResources = toDoMdmService.getCompanies(toDoCompanyResources);


        for (ToDoTaskResponse toDoTaskResponse : toDoTaskResponses) {
            Optional<String> companyIdOptional = toDoTasks.stream().filter(t -> t.getId().equals(toDoTaskResponse.getId())).filter(t -> t.getCompanyId() != null).map(ToDoTask::getCompanyId).findFirst();
            if (companyIdOptional.isPresent()) {
                String companyId = companyIdOptional.get();
                if (!StringUtils.isEmpty(companyId)) {
                    Optional<ToDoCompanyResource> toDoCompanyResource = toDoCompanyResources.stream().filter(t -> t.getId().equals(companyId)).findFirst();
                    if (toDoCompanyResource.isPresent()) {
                        toDoTaskResponse.setCompany(toDoCompanyResource.get());
                    } else {
                        toDoTaskResponse.setCompany(null);
                    }
                } else
                    toDoTaskResponse.setCompany(null);
            } else {
                toDoTaskResponse.setCompany(null);
            }
        }

        List<ToDoUserResource> toDoUserResources = toDoTasks.stream().map(t -> new ToDoUserResource(t.getFileHandlerId(), null, null)).collect(Collectors.toList());
        toDoUserResources.addAll(toDoTasks.stream().map(t -> new ToDoUserResource(t.getSecondaryFileHandlerId(), null, null)).collect(Collectors.toList()));
        toDoUserResources.addAll(toDoTasks.stream().map(t -> new ToDoUserResource(t.getAssignedBy(), null, null)).collect(Collectors.toList()));
        toDoUserResources = toDoMdmService.getUsers(toDoUserResources);

        String fileHandlerId = "";
        String secondaryFileHandlerId = "";
        String assignedById = "";
        for (ToDoTaskResponse toDoTaskResponse : toDoTaskResponses) {
            for (ToDoTask toDoTask : toDoTasks) {
                if (toDoTask.getId().equals(toDoTaskResponse.getId())) {
                    fileHandlerId = toDoTask.getFileHandlerId();
                    secondaryFileHandlerId = toDoTask.getSecondaryFileHandlerId();
                    assignedById = toDoTask.getAssignedBy();
                    break;
                }
            }

            if (!StringUtils.isEmpty(fileHandlerId)) {
                for (ToDoUserResource toDoUserResource : toDoUserResources) {
                    if (toDoUserResource.getId().equals(fileHandlerId)) {
                        toDoTaskResponse.setFileHandler(toDoUserResource);
                    }
                }
            } else {
                toDoTaskResponse.setFileHandler(null);
            }

            if (!StringUtils.isEmpty(secondaryFileHandlerId)) {
                for (ToDoUserResource toDoUserResource : toDoUserResources) {
                    if (toDoUserResource.getId().equals(secondaryFileHandlerId)) {
                        toDoTaskResponse.setSecondaryFileHandler(toDoUserResource);
                    }
                }
            } else {
                toDoTaskResponse.setSecondaryFileHandler(null);
            }

            if (!StringUtils.isEmpty(assignedById)) {
                for (ToDoUserResource toDoUserResource : toDoUserResources) {
                    if (toDoUserResource.getId().equals(assignedById)) {
                        toDoTaskResponse.setAssignedByUser(toDoUserResource);
                    }
                }
            } else {
                toDoTaskResponse.setAssignedByUser(null);
            }
        }
        return toDoTaskResponses;
    }

    @Override
    @Transactional
    public void updateToDoTaskStatus(String entityReferenceId, ToDoTaskSubTypeValues
            subTypeValue, ToDoTaskStatusValues status) {
        try {
            ToDoCriteria toDoCriteria = new ToDoCriteria();
            toDoCriteria.setReferenceId(entityReferenceId);
            toDoCriteria.setTaskSubTypeId(subTypeValue.name());

            ToDoResponse todoResponse = toDoTaskRepository.getByCriteria(toDoCriteria, true);
            if (todoResponse != null && todoResponse.getContent() != null && todoResponse.getContent().size() > 0) {
                ToDoTask toDoTask = todoResponse.getContent().get(0);
                toDoTask.setTaskStatus(status);
                toDoTaskRepository.saveOrUpdate(toDoTask);
            }

        } catch (Exception e) {
            log.error("Error while updating todo status {}", e);
        }
    }

    private void updateToDoTaskResource(ToDoTask aTask, ToDoTaskResource aResource) {
        ToDoTaskNameValues taskNameValues = aTask.getTaskName();
        if (taskNameValues != null) {
            aResource.setTaskNameId(taskNameValues.getValue());
        }

        ToDoTaskTypeValues taskTypeValues = aTask.getTaskType();
        if (taskNameValues != null) {
            aResource.setTaskTypeId(taskTypeValues.getValue());
        }

        ToDoTaskSubTypeValues taskSubType = aTask.getTaskSubType();
        if (taskSubType != null) {
            aResource.setTaskSubTypeId(taskSubType.name());
            aResource.setTaskSubTypeDesc(taskSubType.getSubTaskType());
        }

        ToDoFunctionalAreaValues taskFunctionalArea = aTask.getTaskFunctionalArea();
        if (taskFunctionalArea != null) {
            aResource.setTaskFunctionalAreaId(taskFunctionalArea.getValue());
        }

        ToDoTaskStatusValues taskStatus = aTask.getTaskStatus();
        if (taskStatus != null) {
            aResource.setTaskStatusId(taskStatus.getValue());
        }

        ToDoTaskPriorityValues taskPriority = aTask.getTaskPriority();
        if (taskPriority != null) {
            aResource.setTaskPriorityId(taskPriority.getValue());
        }

        ToDoTaskGeneratedTypeValues taskGeneratedType = aTask.getTaskGeneratedType();
        if (taskGeneratedType != null) {
            aResource.setTaskGeneratedTypeId(taskGeneratedType.name());
        }

        ToDoTaskStatusValues mainTaskStatus = aTask.getMainTaskStatus();
        if (mainTaskStatus != null) {
            aResource.setMainTaskId(mainTaskStatus.getValue());
        }

        ToDoTaskDetails aToDoDetails = aTask.getToDoTaskDetails();
        if (aToDoDetails != null) {
            RecordStatusValues recordStatus = aToDoDetails.getRecordStatus();
            if (recordStatus != null) {
//                aResource.setto?? pending!!
            }
        }
    }

    private void updateToDoTask(ToDoTaskResource aResource, ToDoTask aTask) {
//        RecordStatusValues recordStatusValues = RecordStatusValues.ACTIVE;
        String taskStatusId = aResource.getTaskStatusId();
        ToDoTaskStatusValues toDoTaskStatusValues = ToDoTaskStatusValues.fromString(taskStatusId);
//        if (toDoTaskStatusValues != null) {
//            if (toDoTaskStatusValues.toString().equalsIgnoreCase(ToDoTaskStatusValues.COMPLETED.toString())
//                    || toDoTaskStatusValues.toString().equalsIgnoreCase(ToDoTaskStatusValues.CLOSED.toString())
//                    || toDoTaskStatusValues.toString().equalsIgnoreCase(ToDoTaskStatusValues.FAILED.toString())) {
//                recordStatusValues = RecordStatusValues.INACTIVE;
//            }
//        }

        String subTaskID = aResource.getTaskSubTypeId();
        String subTaskDesc = ToDoTaskSubTypeValues.fromName(subTaskID).getSubTaskType();
        aTask.setTaskSubTypeDesc(subTaskDesc);
    }


    private void copyEnumValues(ToDoTask existingTodoTask, ToDoTaskResource toDoTaskResource) {

        if (toDoTaskResource.getTaskStatusId() != null) {
            existingTodoTask.setTaskStatus(ToDoTaskStatusValues.fromString(toDoTaskResource.getTaskStatusId()));
        }

        if (toDoTaskResource.getTaskPriorityId() != null) {
            existingTodoTask.setTaskPriority(ToDoTaskPriorityValues.fromString(toDoTaskResource.getTaskPriorityId()));
        }

        if (toDoTaskResource.getTaskSubTypeId() != null) {
            existingTodoTask.setTaskSubType(ToDoTaskSubTypeValues.fromName(toDoTaskResource.getTaskSubTypeId()));
        }

        if (toDoTaskResource.getTaskFunctionalAreaId() != null) {
            existingTodoTask.setTaskFunctionalArea(
                    ToDoFunctionalAreaValues.fromString(toDoTaskResource.getTaskFunctionalAreaId()));
        }

        if (toDoTaskResource.getTaskTypeId() != null) {
            existingTodoTask.setTaskType(
                    ToDoTaskTypeValues.fromString(toDoTaskResource.getTaskTypeId()));
        }

        if (toDoTaskResource.getTaskOrientedTypeId() != null) {
            existingTodoTask.setTaskOrientedType(
                    ToDoTaskOrientedValues.fromString(toDoTaskResource.getTaskOrientedTypeId()));
        }

        if (toDoTaskResource.getMainTaskName() != null) {
            existingTodoTask.setMainTaskNameValue(
                    ToDoTaskNameValues.fromString(toDoTaskResource.getMainTaskName()));
        }

    }

    public void createToDoTaskForNewBooking(OpsBooking opsBooking) throws
            InvocationTargetException, IOException, IllegalAccessException, ParseException, OperationException {

        //TODO : To comment the callOperationTODO code in BookingEngine-BookProcessor as now TODO for new booking is created here.
        List<OpsProduct> opsProductList = opsBooking.getProducts();
        //TODO Task For each Order in a new Booking
        for (OpsProduct opsProduct : opsProductList) {
            ToDoTaskResource toDoRequest = new ToDoTaskResource();
            toDoRequest.setCreatedByUserId("bookingEngine");
            toDoRequest.setTaskFunctionalAreaId("OPERATIONS");
            toDoRequest.setTaskNameId("BOOK");
            toDoRequest.setTaskPriorityId("HIGH");
            toDoRequest.setTaskSubTypeId("BOOKING");
            toDoRequest.setTaskTypeId("Main task");
            toDoRequest.setTaskOrientedTypeId(ToDoTaskOrientedValues.ACTION_ORIENTED.getValue());
            toDoRequest.setProductId(opsProduct.getProductName());
            toDoRequest.setAssignedBy("");
            toDoRequest.setBookingRefId(opsBooking.getBookID());
            toDoRequest.setClientCategoryId(opsBooking.getClientCategory());
            toDoRequest.setClientId(opsBooking.getClientID());
            toDoRequest.setClientSubCategoryId(opsBooking.getClientSubCategory());
            toDoRequest.setClientTypeId(opsBooking.getClientType());
            toDoRequest.setCompanyId(opsBooking.getCompanyId());
            toDoRequest.setCompanyMarketId(opsBooking.getCompanyMarket());
            toDoRequest.setFileHandlerId("BookingEngine");
            toDoRequest.setId("");
            toDoRequest.setMainTaskId("");
            toDoRequest.setMainTaskStatusTriggerId("");
            toDoRequest.setNote("");
            //As discussed with Sudhir set OrderId in ReferenceId.
            toDoRequest.setReferenceId(opsProduct.getOrderID());
            toDoRequest.setRemark("");
            toDoRequest.setSecondaryFileHandlerId("");
            toDoRequest.setSuggestedActions("");
            toDoRequest.setTaskGeneratedTypeId("AUTO");
            toDoRequest.setTaskStatusId("");
            toDoRequest.setTaskSubTypeDesc("");

            toDoRequest.setDueOnDate(ZonedDateTime.now().plusDays(2));

            this.save(toDoRequest);
        }
    }

    @Override
    public void createToDoTaskForFailedBooking(OpsBooking opsBooking, OpsProduct opsProduct, KafkaBookingMessage
            kafkaBookingMessage) throws InvocationTargetException, IOException, IllegalAccessException, OperationException {

        ToDoTaskResource toDoRequest = new ToDoTaskResource();
        toDoRequest.setCreatedByUserId("bookingEngine");
        toDoRequest.setTaskFunctionalAreaId("OPERATIONS");
        toDoRequest.setTaskNameId("BOOK");
        toDoRequest.setTaskPriorityId("HIGH");
        if (kafkaBookingMessage.getActionType() == BookingActionConstants.JSON_PROP_ON_REQUEST_BOOKING)
            toDoRequest.setTaskSubTypeId("ON_REQUEST");
        else
            toDoRequest.setTaskSubTypeId("ON_REQUEST");
        toDoRequest.setTaskTypeId("Main task");
        toDoRequest.setProductId(opsProduct.getProductName());
        toDoRequest.setTaskOrientedTypeId(ToDoTaskOrientedValues.ACTION_ORIENTED.getValue());
        toDoRequest.setAssignedBy("");
        toDoRequest.setBookingRefId(opsBooking.getBookID());
        toDoRequest.setClientCategoryId(opsBooking.getClientCategory());
        toDoRequest.setClientId(opsBooking.getClientID());
        toDoRequest.setClientSubCategoryId(opsBooking.getClientSubCategory());
        toDoRequest.setClientTypeId(opsBooking.getClientType());
        toDoRequest.setCompanyId(opsBooking.getCompanyId());
        toDoRequest.setCompanyMarketId(opsBooking.getCompanyMarket());
        toDoRequest.setFileHandlerId("BookingEngine");
        toDoRequest.setId("");
        toDoRequest.setMainTaskId("");
        toDoRequest.setMainTaskStatusTriggerId("");
        toDoRequest.setNote("");
        //As discussed with Sudhir set OrderId in ReferenceId.
        toDoRequest.setReferenceId(kafkaBookingMessage.getOrderNo());
        toDoRequest.setRemark("");
        toDoRequest.setSecondaryFileHandlerId("");
        toDoRequest.setSuggestedActions("");
        toDoRequest.setTaskGeneratedTypeId("AUTO");
        toDoRequest.setTaskStatusId("");
        toDoRequest.setTaskSubTypeDesc("");

        toDoRequest.setDueOnDate(ZonedDateTime.now().plusDays(2));

        this.save(toDoRequest);
    }


}
